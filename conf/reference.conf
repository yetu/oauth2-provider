# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "changeme" # this MUST be overriden in production.

# The application languages
# ~~~~~
application.langs = "en"

# Permission API
# ~~~~~
permission.api.url = "http://permission000.integrationtest.yetu.me"

logger {
  root = ERROR
  play = INFO
  application = INFO
  com.yetu.oauth2provider = INFO
  TEST = DEBUG
}


authorize {
  state.minLength = 20
  state.maxLength = 600
}


redirect.afterlogin = "http://home.yetu.me"

# used as issuer in the access tokens
yetu.publicUrl = "https://auth.yetu.me"

yetu.events {
  logoutEvent = "logout"
  clientId = "oauth2provider"
}

frontendConfig{
  # If you change these, please update controlcenter-deployment configuration as well
  setupDownloadUrlMac = "http://downloads.yetu.me/yetu/public/downloads/gw-setup-app/mac/yetu-setup.dmg"
  setupDownloadUrlWin = "http://downloads.yetu.me/yetu/public/downloads/gw-setup-app/win/yetu-setup.exe"
}

security {

  redirectURICheckingEnabled = true

  expireTimes {
    signatureInSeconds = 12000
    accessTokenInSeconds = 50000
  }

  jsonWebToken {
    privateKeyFilename = "conf/keys/private_key.der"
    publicKeyFilename = "conf/keys/public_key.der"
  }

  authCode.length = 100

}

webanalytics {
  google {
    enabled = false
    trackingId = ""
  }
}

session {
  statusCookie {
    name = "auth-session-status"
    httpOnly = false
    # these elements can also be specified,
    # they default to the values set in securesocial.cookie:
    # path, domain
  }
}

smtp.mock = true # set to false in production and add smtp credentials

persist = true # if true all information will be persisted

ldap {

  # override these if you wish to make use of ldap.
  #  username="..."
  #  password="..."
  #  hostname="..."
  #  port=1389
  numberOfConnections = 10 # Number of connections in connection pool
}


securesocial {

  registrationEnabled = false
  jqueryPath = "javascripts/jquery-1.9.0.min.js"

  #
  # Where to redirect the user if SecureSocial can't figure that out from
  # the request that was received before authenticating the user
  #
  onLoginGoTo = /

  #
  # Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
  #
  #onLogoutGoTo=/auth/login


  enableRefererAsOriginalUrl = false

  #
  # The controller class for assets. This is optional, only required
  # when you use a custom class for Assets.
  #
  # assetsController=controllers.ReverseMyCustomAssetsController

  cookie {
    name = id
    #path=/
    #domain=some_domain
    #httpOnly=true
    # after 2 hours of inactivity with auth.yetu.me your login session is terminated.
    idleTimeoutInMinutes = 120
    # after 12 hours your login session is terminated in all circumstances
    absoluteTimeoutInMinutes = 720
  }


  userpass {
    sendWelcomeEmail = true
    enableGravatarSupport = false
    #signupSkipLogin = true
    #Explanation: comment in, when we want the user to be logged in after signup
    #Currently: no log in after sign up

    # this tokenDuration denotes the duration of the "forget password" and "register/signup" email tokens/weblinks.
    # This is NOT the duration of your login session. For login timouts see "cookie" settings.
    tokenDuration = 1440
    tokenDeleteInterval = 5
    minimumPasswordLength = 8
    enableTokenJob = true
    hasher = bcrypt
  }

  faviconPath = images/favicon.ico

  #
  # Enable SSL
  #
  ssl = true

}

riak {
  #Connects haproxy via port 8098 which points to the environment-specific riak server
  host = "localhost"
  port = 8098
  accesstokenbucket = "accesstokenbucket"
  authinfobucket = "authinfobucket"
  mailtokenbucket = "mailtokenbucket"
  sessionbucket = "sessionbucket"
}
